
#
# Ada GNAT RTS Makefile
#
# Copyright (C) 2020, 2021 Gabriele Galeotti
#
# This work is licensed under the terms of the MIT License.
# Please consult the LICENSE.txt file located in the top-level directory.
#

#
# Arguments:
# make arguments
#
# Environment variables:
# DATACFG_BASE_PATH
# TOOLCHAIN_GCC_WRAPPER
# TOOLCHAIN_ADAC
# TOOLCHAIN_CC
# TOOLCHAIN_AR
# TOOLCHAIN_RANLIB
# RTS_PATH
# ADA_MODE
# MULTILIB_SWITCHES
#

################################################################################
#                                                                              #
# Initialize basic variables and paths.                                        #
#                                                                              #
################################################################################

ADAC   := $(TOOLCHAIN_ADAC) --RTS="$(RTS_PATH)"
CC     := $(TOOLCHAIN_CC)
AR     := $(TOOLCHAIN_AR)
RANLIB := $(TOOLCHAIN_RANLIB)

ADAC_SWITCHES :=
ADAC_SWITCHES += $(MULTILIB_SWITCHES)
ifeq      ($(ADA_MODE),ADA95)
ADAC_SWITCHES += -gnat95
else ifeq ($(ADA_MODE),ADA05)
ADAC_SWITCHES += -gnat2005
else ifeq ($(ADA_MODE),ADA12)
ADAC_SWITCHES += -gnat2012
else ifeq ($(ADA_MODE),ADA20)
ADAC_SWITCHES += -gnat2020
else
$(warning *** Warning: no valid ADA_MODE.)
endif
# we are building a static library, so no PIC
#ADAC_SWITCHES += -fPIC
ADAC_SWITCHES += -nostdinc
ADAC_SWITCHES += -gnatwa
#ADAC_SWITCHES += -gnata     # Assertions enabled.
# -gnatg implies -gnatwae and -gnatyg
ADAC_SWITCHES += -gnatg     # Internal GNAT implementation mode.
#ADAC_SWITCHES += -gnatn     # Activate inlining for subprograms for which pragma inline is specified.
ADAC_SWITCHES += -gnatp     # Suppress all checks.
# turn off some style checks (which are turned on by -gnatg)
#ADAC_SWITCHES += -gnatyC    # Check comments, single space.
#ADAC_SWITCHES += -gnatyM132 # Set maximum line length.
ADAC_SWITCHES += -gnatyN    # Turn off all style checks.
ADAC_SWITCHES += -Wextra
ADAC_SWITCHES += -Wall
ADAC_SWITCHES += -wrapper "$(TOOLCHAIN_GCC_WRAPPER)"

CC_SWITCHES :=
CC_SWITCHES += $(MULTILIB_SWITCHES)
CC_SWITCHES += -ffreestanding
CC_SWITCHES += -Wall
CC_SWITCHES += -wrapper "$(TOOLCHAIN_GCC_WRAPPER)"

# refers to the sibling directory of adainclude
INSTALL_PATH := ../adalib

LIBGNAT  := $(INSTALL_PATH)/libgnat.a
LIBGNARL := $(INSTALL_PATH)/libgnarl.a

# this include file will be generated by the rts-build.sh script once that it
# reads <RTS>/rts-build.in to gather RTS files
include Makefile.srcs.in

LIBGNAT_OBJS := $(addprefix $(INSTALL_PATH)/,$(LIBGNAT_SRCS:.ads=.o))
LIBGNAT_ALIS := $(addprefix $(INSTALL_PATH)/,$(LIBGNAT_SRCS:.ads=.ali))

LIBGNARL_OBJS := $(addprefix $(INSTALL_PATH)/,$(LIBGNARL_SRCS:.ads=.o))
LIBGNARL_ALIS := $(addprefix $(INSTALL_PATH)/,$(LIBGNARL_SRCS:.ads=.ali))

# this include file is target-dependent and should defines the additional
# target-dependent switches
# switches
-include Makefile.rts.in
ADAC_SWITCHES += $(ADAC_SWITCHES_RTS)
CC_SWITCHES   += $(CC_SWITCHES_RTS)

################################################################################
#                                                                              #
# Build targets.                                                               #
#                                                                              #
################################################################################

.PHONY : all
all : $(LIBGNAT) $(LIBGNARL)

$(LIBGNAT) : $(LIBGNAT_OBJS)
	$(AR) cr $@ $(LIBGNAT_OBJS)
	$(RANLIB) $@
	@$(RM) $(LIBGNAT_OBJS)

$(LIBGNARL) : $(LIBGNARL_OBJS)
	$(AR) cr $@ $(LIBGNARL_OBJS)
	$(RANLIB) $@
	@$(RM) $(LIBGNARL_OBJS)

#
# From .../gcc/ada/Makefile.rtl:
#
# Force no function reordering on a-except.o because of the exclusion bounds
# mechanism (see the source file for more detailed information).
# force debugging information on a-except.o so that it is always
# possible to set conditional breakpoints on exceptions.
# use -O1 otherwise gdb isn't able to get a full backtrace on mips targets.
#
$(INSTALL_PATH)/a-except.o : a-except.adb
	$(ADAC) -o $@ -c $(ADAC_SWITCHES) -g -O1 -fno-inline -fno-toplevel-reorder $<

# Ada sources generic rules
$(INSTALL_PATH)/%.o : %.adb
	$(ADAC) -o $@ -c $(ADAC_SWITCHES) -g -O2 $<
$(INSTALL_PATH)/%.o : %.ads
	$(ADAC) -o $@ -c $(ADAC_SWITCHES) -g -O2 $<

# C sources generic rules
$(INSTALL_PATH)/%.o : %.c
	$(CC) -o $@ -c $(CC_SWITCHES) -g -O2 $<

.PHONY : clean
clean :
	$(RM)                                               \
              $(LIBGNAT_ALIS) $(LIBGNAT_OBJS) $(LIBGNAT)    \
              $(LIBGNARL_ALIS) $(LIBGNARL_OBJS) $(LIBGNARL)

