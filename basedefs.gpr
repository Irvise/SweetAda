
with "configure";

abstract project Basedefs is

   ----------------------------------------------------------------------------
   -- Types and variables
   ----------------------------------------------------------------------------

   Ostype  := External ("OSTYPE", "");
   Verbose := External ("VERBOSE", "");

   ----------------------------------------------------------------------------
   -- Naming
   ----------------------------------------------------------------------------

   package Naming is
      for Spec_Suffix ("Asm_Cpp") use ".h";
      for Body_Suffix ("Asm_Cpp") use ".S";
      for Spec_Suffix ("C")       use ".h";
      for Body_Suffix ("C")       use ".c";
      for Spec_Suffix ("Ada")     use ".ads";
      for Body_Suffix ("Ada")     use ".adb";
   end Naming;

   ----------------------------------------------------------------------------
   -- Builder
   ----------------------------------------------------------------------------

   Builder_Switches := ();

   case Verbose is
      when "Y" | "y" | "1" => Builder_Switches := Builder_Switches & ("-v");
      when others          => null;
   end case;

   package Builder is
      for Global_Configuration_Pragmas use Configure.GnatAdc_Filename;
      for Switches ("Asm_Cpp") use Builder_Switches;
      for Switches ("C") use Builder_Switches;
      for Switches ("Ada") use (
                                "-nostdinc",
                                "-nostdlib",
                                "--RTS=" & Configure.RTS_Path
                               ) &
                               Builder_Switches;
   end Builder;

   ----------------------------------------------------------------------------
   -- Compiler
   ----------------------------------------------------------------------------

   Ada_Mode := "";
   case Configure.Ada_Mode is
      when "ADA95" => Ada_Mode := "-gnat95";
      when "ADA05" => Ada_Mode := "-gnat2005";
      when "ADA12" => Ada_Mode := "-gnat2012";
      when "ADA20" => Ada_Mode := "-gnat2020";
      when "ADA22" => Ada_Mode := "-gnat2022";
      when others  => null;
   end case;

   GCC_Wrapper_Switch := ("-wrapper", Configure.GCC_Wrapper);

   No_DOS_LT_Switch := "";
   case Ostype is
      when "cmd" | "msys" => null;
      when others         => No_DOS_LT_Switch := "-gnatyd"; -- Check no DOS line terminators present.
   end case;

   package Compiler is
      -- Asm_Cpp
      for Driver ("Asm_Cpp") use Configure.Toolchain_Prefix & "/bin/" & Configure.Toolchain_Name & "-gcc";
      for Switches ("Asm_Cpp") use (
                                    "-ffunction-sections",
                                    "-fdata-sections",
                                    "-g3", "-gdwarf-5"
                                   ) &
                                   Configure.GCC_Switches_Platform &
                                   GCC_Wrapper_Switch;
      -- C
      for Driver ("C") use Configure.Toolchain_Prefix & "/bin/" & Configure.Toolchain_Name & "-gcc";
      for Leading_Required_Switches ("C") use ("-ffreestanding", "-std=c99");
      for Switches ("C") use (
                              "-O" & Configure.Optimization_Level,
                              "-fno-omit-frame-pointer",
                              "-fverbose-asm",
                              "-ffunction-sections",
                              "-fdata-sections",
                              "-g3", "-gdwarf-5",
                              "-Wall", "-pedantic",
                              "-Wbad-function-cast",
                              "-Wcast-align",
                              "-Winline",
                              "-Wpointer-arith",
                              "-Wredundant-decls",
                              "-Wshadow",
                              "-Wsign-compare",
                              "-Wstrict-prototypes",
                              "-Wundef",
                              "-Wwrite-strings"
                             ) &
                             Configure.CC_Switches_RTS       &
                             Configure.GCC_Switches_Platform &
                             GCC_Wrapper_Switch;
      -- Ada
      for Driver ("Ada") use Configure.Toolchain_Prefix & "/bin/" & Configure.Toolchain_Name & "-gcc";
      for Mapping_Spec_Suffix ("Ada") use "%s";
      for Mapping_Body_Suffix ("Ada") use "%b";
      for Dependency_Kind ("Ada") use "ALI_File";
      for Multi_Unit_Object_Separator ("Ada") use "~";
      for Leading_Required_Switches ("Ada") use ("-x", "ada");
      for Include_Switches ("Ada") use ("-I");
      for Switches ("Ada") use (
                                Ada_Mode,
                                "-O" & Configure.Optimization_Level,
                                "-fno-omit-frame-pointer",
                                "-fverbose-asm",
                                "-ffunction-sections",
                                "-fdata-sections",
                                "-g3", "-gdwarf-5",
                                "-gnatef",
                                "-gnatf",
                                "-gnatU",
                                "-gnatn",
                                "-gnatE",
                                "-gnato1",
                                "-gnatVa",
                                "-gnatX",
                                "-fstack-usage",
                                "-fdump-rtl-expand",
                                -- warning switches ---------------------------
                                -- "-gnatwa",         -- Activate most optional warnings.
                                "-gnatw.a",        -- Activate warnings on failing assertions.
                                "-gnatwb",         -- Activate warnings on bad fixed values.
                                "-gnatw.b",        -- Activate warnings on biased representation.
                                "-gnatwC",         -- Activate warnings on conditionals.
                                -- "-gnatw.c",        -- Activate warnings on missing component clauses.
                                "-gnatwd",         -- Activate warnings on implicit dereferencing.
                                "-gnatw.d",        -- Activate tagging of warning and info messages.
                                -- "-gnatwe",         -- Treat warnings and style checks as errors.
                                -- "-gnatwf",         -- Activate warnings on unreferenced formals.
                                "-gnatwg",         -- Activate warnings on unrecognized pragmas.
                                "-gnatwh",         -- Activate warnings on hiding.
                                -- "-gnatw.h",        -- Activate warnings on holes/gaps in records.
                                "-gnatwI",         -- Activate warnings on implementation units.
                                -- "-gnatwi",         -- Activate warnings on implementation units.
                                "-gnatw.i",        -- Activate warnings on overlapping actuals.
                                "-gnatwj",         -- Activate warnings on obsolescent features (Annex J).
                                "-gnatwk",         -- Activate warnings on variables that could be constants.
                                "-gnatw.k",        -- Activate warnings on redefinition of names in standard.
                                "-gnatwl",         -- Activate warnings for elaboration pragmas.
                                "-gnatw.l",        -- List inherited aspects.
                                "-gnatwm",         -- Activate warnings on modified but unreferenced variables.
                                "-gnatw.m",        -- Activate warnings on suspicious modulus values.
                                -- "-gnatw.n",        -- Activate warnings on atomic synchronization.
                                "-gnatwo",         -- Activate warnings on address clause overlays.
                                "-gnatw.o",        -- Activate warnings on modified but unreferenced out parameters.
                                "-gnatwp",         -- Activate warnings on ineffective pragma Inlines.
                                "-gnatw.p",        -- Activate warnings on parameter ordering.
                                "-gnatwq",         -- Activate warnings on questionable missing parentheses.
                                "-gnatw.q",        -- Activate warnings on questionable layout of record types.
                                "-gnatwr",         -- Activate warnings on redundant constructs.
                                "-gnatw.r",        -- Activate warnings for object renaming function.
                                -- "-gnatw_r",        -- Activate warnings for out-of-order record representation clauses.
                                "-gnatw.s",        -- Activate warnings on overridden size clauses.
                                -- "-gnatwt",         -- Activate warnings for tracking of deleted conditional code.
                                "-gnatw.t",        -- Activate warnings on suspicious contracts.
                                "-gnatw.u",        -- Activate warnings on unordered enumeration types.
                                "-gnatwv",         -- Activate warnings on unassigned variables.
                                -- "-gnatw.v",        -- Activate info messages for non-default bit order.
                                "-gnatw.V",        -- Suppress info messages for non-default bit order.
                                "-gnatww",         -- Activate warnings on wrong low bound assumption.
                                -- "-gnatw.w",        -- Activate warnings on Warnings Off pragmas.
                                "-gnatwx",         -- Activate warnings on Export/Import pragmas.
                                "-gnatw.X",        -- Disable warnings for No_Exception_Propagation mode.
                                -- "-gnatw.y",        -- Activate information messages for why package spec needs body.
                                "-gnatwz",         -- Activate warnings on unchecked conversions.
                                "-gnatw.z",        -- Activate warnings for size not a multiple of alignment.
                                "-Wstack-usage=" & Configure.Stack_Limit,
                                "-Wunused",
                                "-Wuninitialized",
                                -- "-gnatwu",         -- Activate warnings on unused entities.
                                -- style switches -----------------------------
                                "-gnaty3",    -- Specify indentation level.
                                "-gnatyA",    -- Use of array index numbers in array attributes.
                                "-gnatya",    -- Check attribute casing.
                                "-gnatyb",    -- Blanks not allowed at statement end.
                                "-gnatyB",    -- Check Boolean operators.
                                -- "-gnatyc",    -- Check comments, double space.
                                "-gnatyC",    -- Check comments, single space.
                                "-gnatye",    -- Check end/exit labels.
                                "-gnatyf",    -- No form feeds or vertical tabs.
                                -- "-gnatyg",    -- GNAT style mode.
                                "-gnatyh",    -- No horizontal tabs.
                                -- "-gnatyI",    -- check mode IN keywords.
                                "-gnatyi",    -- Check if-then layout.
                                "-gnatyk",    -- Check keyword casing.
                                "-gnatyL9",   -- Set maximum nesting level.
                                "-gnatyl",    -- Check layout.
                                -- "-gnatym",    -- Check maximum line length.
                                "-gnatyM132", -- Set maximum line length.
                                "-gnatyn",    -- Check casing of entities in Standard.
                                -- "-gnatyo",    -- Check order of subprogram bodies.
                                "-gnatyO",    -- Check that overriding subprograms are explicitly marked as such.
                                "-gnatyp",    -- Check pragma casing.
                                "-gnatyr",    -- Check references.
                                "-gnatyS",    -- Check no statements after then/else.
                                "-gnatys",    -- Check separate specs.
                                "-gnatyt",    -- Check token spacing.
                                "-gnatyu",    -- Check unnecessary blank lines.
                                "-gnatyx",    -- Check extra parentheses.
                                No_DOS_LT_Switch
                               ) &
                               Configure.ADAC_Switches_RTS     &
                               Configure.GCC_Switches_Platform &
                               GCC_Wrapper_Switch;
   end Compiler;

   ----------------------------------------------------------------------------
   -- Binder
   ----------------------------------------------------------------------------

   Binder_Switches := ();

   package Binder is
      for Switches ("Ada") use (
                                "-F",
                                "-e",
                                "-l",
                                "-n",
                                "-s",
                                "-A=gnatbind_alis.lst",
                                "-O=gnatbind_objs.lst"
                               ) &
                               Binder_Switches;
   end Binder;

   ----------------------------------------------------------------------------
   -- Library definitions
   ----------------------------------------------------------------------------

   Library_Kind    := "static";
   Library_Support := "static_only";
   Library_Builder := "../libexec/gprbuild/gprlib";
   case Configure.Gprbuild_Prefix is
      when ""     => null;
      when others => Library_Builder := Configure.Gprbuild_Prefix & "bin/" & Library_Builder;
   end case;
   Archive_Builder := (Configure.Toolchain_Prefix & "/bin/" & Configure.Toolchain_Name & "-ar", "cr");

end Basedefs;
