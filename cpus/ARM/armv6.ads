-----------------------------------------------------------------------------------------------------------------------
--                                                     SweetAda                                                      --
-----------------------------------------------------------------------------------------------------------------------
-- __HDS__                                                                                                           --
-- __FLN__ armv6.ads                                                                                                 --
-- __DSC__                                                                                                           --
-- __HSH__ e69de29bb2d1d6434b8b29ae775ad8c2e48c5391                                                                  --
-- __HDE__                                                                                                           --
-----------------------------------------------------------------------------------------------------------------------
-- Copyright (C) 2020, 2021, 2022 Gabriele Galeotti                                                                  --
--                                                                                                                   --
-- SweetAda web page: http://sweetada.org                                                                            --
-- contact address: gabriele.galeotti@sweetada.org                                                                   --
-- This work is licensed under the terms of the MIT License.                                                         --
-- Please consult the LICENSE.txt file located in the top-level directory.                                           --
-----------------------------------------------------------------------------------------------------------------------

with System;
with System.Storage_Elements;
with Ada.Unchecked_Conversion;
with Interfaces;
with Bits;

package ARMv6 is

   --========================================================================--
   --                                                                        --
   --                                                                        --
   --                               Public part                              --
   --                                                                        --
   --                                                                        --
   --========================================================================--

   pragma Preelaborate;

   use System;
   use System.Storage_Elements;
   use Interfaces;
   use Bits;

   -- Auxiliary Control Register
   -- IMPLEMENTATION DEFINED

   type ACTLR_Type is
   record
      Reserved : Bits_32;
   end record with
      Bit_Order => Low_Order_First,
      Size      => 32;
   for ACTLR_Type use
   record
      Reserved at 0 range 0 .. 31;
   end record;

   ACTLR_ADDRESS : constant := 16#E000_E008#;

   -- CPUID Base Register

   type CPUID_Type is
   record
      Revision    : Bits_4;
      PartNo      : Bits_12;
      Constant0F  : Bits_4;  -- 0x0F
      Variant     : Bits_4;
      Implementer : Bits_8;  -- 0x41 = ARM
   end record with
      Bit_Order => Low_Order_First,
      Size      => 32;
   for CPUID_Type use
   record
      Revision    at 0 range 0 .. 3;
      PartNo      at 0 range 4 .. 15;
      Constant0F  at 0 range 16 .. 19;
      Variant     at 0 range 20 .. 23;
      Implementer at 0 range 24 .. 31;
   end record;

   CPUID_ADDRESS : constant := 16#E000_ED00#;

   CPUID : aliased CPUID_Type with
      Address              => To_Address (CPUID_ADDRESS),
      Volatile_Full_Access => True,
      Import               => True,
      Convention           => Ada;

   function To_U32 is new Ada.Unchecked_Conversion (CPUID_Type, Unsigned_32);

   -- Interrupt Control and State Register

   type ICSR_Type is
   record
      VECTACTIVE  : Bits_9;  -- The exception number of the current executing exception.
      Reserved1   : Bits_2;
      RETTOBASE   : Boolean; -- Whether there is an active exception other than the exception shown by IPSR.
      VECTPENDING : Bits_9;  -- The exception number of the highest priority pending and enabled interrupt.
      Reserved2   : Bits_1;
      ISRPENDING  : Boolean; -- Indicates whether an external interrupt, generated by the NVIC, is pending.
      ISRPREEMPT  : Boolean; -- Indicates whether a pending exception will be serviced on exit from debug halt state.
      Reserved3   : Bits_1;
      PENDSTCLR   : Boolean; -- Removes the pending status of the SysTick exception.
      PENDSTSET   : Boolean; -- W: sets the SysTick exception as pending R: indicates the current state of the exception.
      PENDSVCLR   : Boolean; -- Removes the pending status of the PendSV exception.
      PENDSVSET   : Boolean; -- W: sets the PendSV exception as pending. R: indicates the current state of the exception.
      Reserved4   : Bits_2;
      NMIPENDSET  : Boolean; -- W: makes the NMI exception active R: indicates the state of the exception.
   end record with
      Bit_Order => Low_Order_First,
      Size      => 32;
   for ICSR_Type use
   record
      VECTACTIVE  at 0 range 0 .. 8;
      Reserved1   at 0 range 9 .. 10;
      RETTOBASE   at 0 range 11 .. 11;
      VECTPENDING at 0 range 12 .. 20;
      Reserved2   at 0 range 21 .. 21;
      ISRPENDING  at 0 range 22 .. 22;
      ISRPREEMPT  at 0 range 23 .. 23;
      Reserved3   at 0 range 24 .. 24;
      PENDSTCLR   at 0 range 25 .. 25;
      PENDSTSET   at 0 range 26 .. 26;
      PENDSVCLR   at 0 range 27 .. 27;
      PENDSVSET   at 0 range 28 .. 28;
      Reserved4   at 0 range 29 .. 30;
      NMIPENDSET  at 0 range 31 .. 31;
   end record;

   ICSR_ADDRESS : constant := 16#E000_ED04#;

   ICSR : aliased ICSR_Type with
      Address              => To_Address (ICSR_ADDRESS),
      Volatile_Full_Access => True,
      Import               => True,
      Convention           => Ada;

   -- Vector Table Offset Register

   type VTOR_Type is
   record
      Reserved : Bits_6;
      TBLOFF   : Bits_26; -- Bits[31:7] of the vector table address.
   end record with
      Bit_Order => Low_Order_First,
      Size      => 32;
   for VTOR_Type use
   record
      Reserved at 0 range 0 .. 5;
      TBLOFF   at 0 range 6 .. 31;
   end record;

   VTOR_ADDRESS : constant := 16#E000_ED08#;

   VTOR : aliased VTOR_Type with
      Address              => To_Address (VTOR_ADDRESS),
      Volatile_Full_Access => True,
      Import               => True,
      Convention           => Ada;

   ----------------------------------------------------------------------------
   -- Generic definitions
   ----------------------------------------------------------------------------

   procedure NOP with
      Inline => True;
   procedure BREAKPOINT with
      Inline => True;

   ----------------------------------------------------------------------------
   -- Exceptions and interrupts
   ----------------------------------------------------------------------------

   procedure Irq_Enable with
      Inline => True;
   procedure Irq_Disable with
      Inline => True;

   ----------------------------------------------------------------------------
   -- Locking
   ----------------------------------------------------------------------------

   procedure Memory_Synchronization with
      Inline        => True,
      Export        => True,
      Convention    => C,
      External_Name => "__sync_synchronize";

end ARMv6;
